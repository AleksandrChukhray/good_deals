<?php    header("Content-Type:text/html;charset=UTF-8");    //session_start();    set_time_limit(0);        define('PATH_SITE_ROOT', $_SERVER['DOCUMENT_ROOT'].'/');        require_once "../../config.php";    require_once '../../connection.php';    require_once '../../core/global.php';    require_once '../../core/PHPMailer/PHPMailerAutoload.php';        // Крутим скрипт до тех пор, пока не все письма отправлены    $vTaskName = "email_sending_1";    if (!IsNewTaskInstanceCanBeRunning($vTaskName, GetLocalDateTime()->modify('-5 minutes'))) {        return;    }        $mail = null;    $vProcessingGUID = "";    try {        // Сначала обработаем список рассылки и добавим задания на рассылку        $vContinueProcessing = true;        while ($vContinueProcessing) {            $sql = "select count(*) as RecordCount from Emails_Notify;";            $rec = GetMainConnection()->query($sql)->fetch();                        if ($rec['RecordCount'] == '0') {                // прерываемcя, когда больше нет записей для обработки                $vContinueProcessing = false;                break;            } else {                // обрабатываем пачками, чтобы не перегрузить сервер                $sql = "update Emails_Notify ".                       "set InProcess = 1 ".                       "order by CreateDate ".                       "limit 100;";                GetMainConnection()->exec($sql);                                // создаем задания на рассылку по списку рассылки (только для акти)                $sql = "insert into Emails_ToSend(RecordGUID, CreateDate, Priority, FromEmail, FromName, ToEmail, Subject, Body) ".                       "select UUID(), N.CreateDate, 120, 'sending@karapuz.life', 'Карапуз', NR.Email, N.Subject, N.Body ".                       "from Emails_Notify as N ".                       "left outer join Emails_NotifyRecipients as NR on ((N.DocumentType = NR.DocumentType) and (N.DocumentID = NR.DocumentID)) ".                       "where (N.InProcess = 1) ".                       "and (lower(N.OwnerEmail) <> lower(NR.Email)) ". // не отправлять уведомление человеку, который добавил пост, о котором идет уведомление                       "and (coalesce(NR.Email, '') <> '');";                GetMainConnection()->exec($sql);                                // удаление обработанной пачки записей из Emails_Notify                $sql = "delete from Emails_Notify where InProcess = 1;";                GetMainConnection()->exec($sql);                                usleep(50); // in msec            }        }                $vContinueProcessing = true;        while ($vContinueProcessing) {            $vProcessingGUID = getGUID();            $sql = "update Emails_ToSend ".                   "set ProcessingDate = '".GetLocalDateTimeAsSQLStr()."', ".                       "ProcessingGUID = '$vProcessingGUID', ".                       "CountAttempts = CountAttempts+1 ".                   "where ((ProcessingGUID is null) or ((ProcessingDate is not null) and (ProcessingDate < '".GetLocalDateTime()->modify('-5 minutes')->format('Y-m-d H:i:s')."'))) ".                   "and (CountAttempts < 3) ".                   "order by Priority, CreateDate ".                   "limit 1;";            GetMainConnection()->exec($sql);            $sql = "select RecordGUID, CreateDate, CountAttempts, FromEmail, FromName, ToEmail, ToName, CopyToEmail, BlindCopyToEmail, Subject, Body, UseTemplate ".                   "from Emails_ToSend ".                   "where (ProcessingGUID = '$vProcessingGUID') ".                   "limit 1;";            $rec = GetMainConnection()->query($sql)->fetch();            if (empty($rec['RecordGUID'])) {                $vContinueProcessing = false;            } else {                if (!isset($mail)) {                    $mail = new PHPMailer;                    $mail->setLanguage('ru');                    $mail->CharSet = 'utf-8';                    //$mail->SMTPDebug = 3;                               // Enable verbose debug output                    $mail->isSMTP();                                      // Set mailer to use SMTP                    //$mail->Timeout = 10;                    $mail->Host = SMTP_HOST;                              // Specify main SMTP servers                    $mail->SMTPAuth = true;                               // Enable SMTP authentication                    $mail->Username = SMTP_USERNAME;                      // SMTP username                    $mail->Password = SMTP_PASSWORD;                      // SMTP password                    $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted                    $mail->Port = (int)SMTP_PORT;                         // TCP port to connect to                    $mail->SMTPKeepAlive = true;                }                $mail->SetFrom($rec['FromEmail'], (empty($rec['FromName']) ? 'Карапуз' : $rec['FromName']));                $mail->AddReplyTo($rec['FromEmail'], (empty($rec['FromName']) ? 'Карапуз' : $rec['FromName']));                //cc: — (от англ. carbon copy). Содержит имена и адреса вторичных получателей письма, к которым направляется копия.                if (!empty($rec['CopyToEmail'])) {                    $mail->addCC($rec['CopyToEmail']);                }                /* bcc: — (от англ. blind carbon copy). Содержит имена и адреса получателей письма,                  * чьи адреса не следует показывать другим получателям. Это поле обычно обрабатывается                  * почтовым сервером (и приводит к появлению нескольких разных сообщений, у которых bcc                  * содержит только того получателя, кому фактически адресовано письмо).                  * Каждый из получателей не будет видеть в этом поле других получателей из поля bcc.*/                if (!empty($rec['BlindCopyToEmail'])) {                    $mail->addBCC($rec['BlindCopyToEmail']);                }                // add addresses                /*if (is_array($to)) {                    foreach ($to as $t) {                        $mail->AddAddress($t);                    }                } else {                    $mail->AddAddress($to);                }*/                $mail->AddAddress($rec['ToEmail'], $rec['ToName']);                // Set email format to HTML                $mail->isHTML(true);                $mail->Subject = $rec['Subject'];                // add content                if (empty($rec['UseTemplate'])) {                    $vBody = base64_decode($rec['Body']);                } else {                    if (empty($rec['Body'])) {                        $vTemplateParamsArray = array();                    } else {                        $vTemplateParamsArray = unserialize(base64_decode($rec['Body']));                    }                    $vBody = strtr(file_get_contents(URL.'public/mails/'.$rec['UseTemplate'].'.html'), $vTemplateParamsArray);                }                $mail->MsgHTML($vBody);                /*                // add attachments                if ($attach != null) {                    foreach ($attach as $a) {                        $mail->AddAttachment($a['path'], $a['name']);                    }                }*/                //$answer = (!$mail->send()) ? $mail->ErrorInfo : true;                SetTaskActivity($vTaskName, true);                if ($mail->send()) {                    $sql = "insert into Emails_Sent(RecordGUID, CreateDate, SentDate, FromEmail, FromName, ToEmail, ToName, CopyToEmail, BlindCopyToEmail, Subject, Body) ".                           "values('".$rec['RecordGUID']."', '".$rec['CreateDate']."', '".GetLocalDateTimeAsSQLStr()."', '".$rec['FromEmail']."', '".$rec['FromName']."', '".$rec['ToEmail']."', '".$rec['ToName']."', '".$rec['CopyToEmail']."', '".$rec['BlindCopyToEmail']."', '".$rec['Subject']."', '".base64_encode($vBody)."');";                    GetMainConnection()->exec($sql);                                                    $sql = "delete from Emails_ToSend where RecordGUID = '".$rec['RecordGUID']."';";                    GetMainConnection()->exec($sql);                } else {                    $vContinueProcessing = false;                                        $sql = "update Emails_ToSend set Error = '".ClearSQLStr($mail->ErrorInfo)."' where RecordGUID = '".$rec['RecordGUID']."';";                    GetMainConnection()->exec($sql);                                    }                $mail->ClearAddresses();                $mail->ClearAttachments();                //CountAttempts            }            usleep(50); // in msec        }    } catch (Exception $exc) {        //echo $exc->getTraceAsString();        if (!empty($vProcessingGUID)) {            $sql = "update Emails_ToSend set Error = '".ClearSQLStr($exc->getMessage())." where (ProcessingGUID = '$vProcessingGUID') ".            GetMainConnection()->exec($sql);        }    } finally {        if (isset($mail)) {            $mail->smtpClose();        }        SetTaskActivity($vTaskName, false);    }?>    