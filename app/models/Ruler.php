<?phpclass Ruler extends Model {	protected $table = 'Ruler';		/**	* Add ruler	*/	public function add($background, $slider, $length, $counter, $text, $color, $date_start){		//$context = Tools::getContext();				switch($length){			case 'month': $length = 1; break;			case 'nine_month': $length = 9; break;			default: $length = 12; break;		}				$start = new DateTime($date_start, new DateTimeZone('Europe/Kiev'));		$end = new DateTime($date_start, new DateTimeZone('Europe/Kiev'));		$end->modify('+'.$length.' month');				$query = 'INSERT INTO Ruler (Background, Slider, Length, Counter, Text, Color, DateStart, DateEnd) VALUES (:b, :s, :l, :counter, :t, :c, :ds, :de)';		$mask = array('b' => $background, 's' => $slider, 'l' => $length, 'counter' => $counter, 't' => $text, 'c' => $color, 'ds' => $start->format('Y-m-d H:i:s'), 'de' => $end->format('Y-m-d H:i:s'));		$this->db->prepare($query)->execute($mask);				return $this->db->lastInsertId();	}			/**	* Update image	*/	public function updateImage($id){		$ruler = new Ruler($id);		if ($ruler->Background == null)			return false;                require_once 'core/class.upload/class.upload.php';				$templates = DIR_DBIMAGES.'ruler/templates/';		$results = DIR_DBIMAGES.'ruler/results/';				$iu = new Upload($templates.$ruler->Background);		$iu->file_overwrite = true;		$iu->file_new_name_body = $id;		$iu->file_new_name_ext = 'jpg';		$iu->image_unsharp = true;		$iu->image_border = '0 0 16 0';		$iu->image_border_color = (strtolower($ruler->Color) == '#ffffff') ? '#333333' : '#ffffff';		$iu->image_watermark = $templates.$ruler->Slider;		$iu->image_watermark_y = 35;		$iu->image_watermark_x = $ruler->getSliderPosition();		$iu->Process($results);		$image = imagecreatefromjpeg($results.$id.'.jpg');		imagettftext($image, 12, 0, 10, 133, preg_replace('/\#/', '0x', strtoupper($ruler->Color)), DIR_PUBLIC.'fonts/calibri.ttf', $ruler->getText());		imagettftext($image, 12, 0, 510, 133, preg_replace('/\#/', '0x', strtoupper($ruler->Color)), DIR_PUBLIC.'fonts/calibri.ttf', 'karapuz.life');		imagejpeg($image, $results.$id.'.jpg', 100);	}			/**	* Return text for picture	*/	public function getText(){		$now = new DateTime('now', new DateTimeZone('Europe/Kiev'));		$date_start = new DateTime($this->DateStart, new DateTimeZone('Europe/Kiev'));		$date_end = new DateTime($this->DateEnd, new DateTimeZone('Europe/Kiev'));				switch($this->counter){			case 'd': $format = '%a '.Tools::declension($date_start->diff($now)->format('%a'), array('день', 'дня', 'дней')); break;			case 'm': $format = '%m '.Tools::declension($date_start->diff($now)->format('%m'), array('месяц', 'месяца', 'месяцев')); break;			case 'md': $format = '%m '.Tools::declension($date_start->diff($now)->format('%m'), array('месяц', 'месяца', 'месяцев')).' %d '.Tools::declension($date_start->diff($now)->format('%d'), array('день', 'дня', 'дней')); break;			default: $format = '%y '.Tools::declension($date_start->diff($now)->format('%y'), array('год', 'года', 'лет')).' %m '.Tools::declension($date_start->diff($now)->format('%m'), array('месяц', 'месяца', 'месяцев')).' %d '.Tools::declension($date_start->diff($now)->format('%d'), array('день', 'дня', 'дней')); break;		}		return $this->Text.' '.$date_start->diff($now)->format($format);	}			/**	* Return slider position	*/	public function getSliderPosition(){		$now = new DateTime('now', new DateTimeZone('Europe/Kiev'));		$date_start = new DateTime($this->DateStart, new DateTimeZone('Europe/Kiev'));		$date_end = new DateTime($this->DateEnd, new DateTimeZone('Europe/Kiev'));		return ($date_start->diff($now)->format('%a') * 100 / $date_start->diff($date_end)->format('%a')) * 6;	}	}