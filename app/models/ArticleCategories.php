<?phpclass ArticleCategories extends Model {	protected $table = 'ArticleCategories';	/**	* Return articles of category	*/	public function getArticles($p = 1, $count = false){            if ($count == true) {                $query = "SELECT count(*) as RecordCount ".                         "FROM Articles a ".                         "WHERE a.CategoryID = ".$this->ID." ".                         "AND a.isActive = 1 ".                         "AND a.IsDeleted = 0";                $TempSet = $this->db->query($query)->fetch();                return $TempSet['RecordCount'];            }            $query = "SELECT a.ID, a.CategoryID, a.Name, a.ShortDescription, a.count_likes, a.CountComments ".                     "FROM Articles a ".                     "WHERE a.CategoryID = ".$this->ID." ".                     "AND a.isActive = 1 ".                      "AND a.IsDeleted = 0 ".                     "ORDER BY a.CreateDate DESC, a.ID DESC";            $query .= ' LIMIT '.(($p > 0) ? $p-1 : 0)*ARTICLES_PER_PAGE.', '.ARTICLES_PER_PAGE;            $articles = $this->db->query($query)->fetchAll();            foreach ($articles as $k=>$a){                $articles[$k]['image'] = Tools::getArticleImages($a['ID'], 'PhotoS');            }            return $articles;	}		/**	* Recursive	*/	private function _recursiveTree($id_parent = 0, $items){		$tree = array();		if (count($items[$id_parent]) > 0){			foreach ($items[$id_parent] as $k=>$item){				$tree[$k] = array();				$tree[$k]['item'] = $item;				$tree[$k]['childrens'] = $this->_recursiveTree($item['ID'], $items);			}		}		else			return false;					return $tree;	}		/**	* Get and return tree. It's work if $data have id and id_parent fields	* @data - list of data(object)	*/	public function getCategoriesTree(){            $query = 'SELECT ID, Name FROM ArticleCategories WHERE IsDeleted = 0';            $categories = $this->db->query($query)->fetchAll();            if (count($categories) < 1) {                return false;                            }            $items = array();            foreach ($categories as $item){                $items[0][$item['ID']] = $item;            }            $items = $this->_recursiveTree(0, $items);            return (count($items) > 0) ? $items : false;	}		/**	* Get and return html tree	* @data - list of data(object)	* @level - level of tree (int)	*/	public function getCategoriesTreeHTML(){        	$data = $this->getCategoriesTree();		$counter = 1;		$tree = '<ul class="level1 acordion">';                $tree .= '<li class="line"></li>';                $tree .= '<li>';                $tree .= '<a href="/category/" class="name">Все статьи</a>';                $tree .= '</li>';                                foreach ($data as $k=>$d){			$tree .= '<li class="line"></li>';			$tree .= '<li '.(($counter == count($data)) ? 'class="last"' : '').'>';			$tree .= '<a href="/articles/c-'.$d['item']['ID'].'/" class="name">'.$d['item']['Name'].'</a>';			$tree .= '</li>';			$counter++;		}		$tree .= '</ul>';				return $tree;	}}