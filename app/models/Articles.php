<?phpclass Articles extends Model {	protected $table = 'Articles';	public function __construct($Acontext, $id = null){        $context = $Acontext;        $this->db = $context->db;                if ($id !== null){            $query = 'SELECT a.ID, a.CategoryID, a.Name, a.ShortDescription, a.count_likes, a.CountComments, a.CountViews, a.IsActive, a.AuthorID, a.MetaKeywords, a.Description, a.CreateDate, a.MainImageExt FROM Articles as a WHERE ';            $query .= (preg_match('/\=/', $id)) ? $id : 'a.ID = '.(int)$id;            $data = $this->db->query($query)->fetch();            if (!isset($data['ID'])) {                return AddAlertMessage('danger', 'Статьи не существует.', '/');            }            $query = "select Photo, Comment from ArticleImages where (ArticleID = ".$data['ID'].") and (Type = 1) and (coalesce(Comment, '') <> '');";            $photos = $this->db->query($query)->fetchAll();            foreach ($photos as $key=>$val){                $URLPos = strpos($data['Description'], $val['Photo']);                if ($URLPos !== FALSE) {                    $ImgStartPos = strrpos($data['Description'], "<img ", -(strlen($data['Description']) - $URLPos));                    $ImgEndPos = stripos($data['Description'], "/>", $URLPos);                    $ImgStr = substr($data['Description'], $ImgStartPos, $ImgEndPos-$ImgStartPos+2);                    $ImgBox = '<div id="ImageAndCommentBox"> '.                                $ImgStr.                                '<div class="CommentForImageBox"> '.$val['Comment'].'</div> '.                              '</div>';                    $data['Description'] = str_replace($ImgStr, $ImgBox, $data['Description']);                 }            }            if ($data !== false) {                foreach ($data as $k=>$p) {                    $this->$k = $p;                }                    }        }	}		public function getArticles($p = 1, $where = '', $count = false){        if ($count == true) {            $query = "SELECT count(*) as RecordCount ".                     "FROM Articles a ".                     "WHERE a.IsActive = 1 ".                     "AND a.IsDeleted = 0 ".                     (empty($where)? "" : "AND ".$where);            $TempSet = $this->db->query($query)->fetch();            return $TempSet['RecordCount'];        }        $query = 'SELECT a.ID, a.CategoryID, a.Name, a.ShortDescription, a.count_likes, a.CountComments, a.MainImageExt FROM Articles as a where a.IsActive = 1 AND a.IsDeleted<>1 ';        $query .= (empty($where) ? '' : 'AND '.$where.' ');        $query .= 'ORDER BY a.CreateDate DESC, a.ID DESC';        $query .= ' LIMIT '.(($p > 0) ? $p-1 : 0)*ARTICLES_PER_PAGE.', '.ARTICLES_PER_PAGE;        $articles = $this->db->query($query)->fetchAll();        return $articles;	}		public function getSimilar($id){		if (!isset($this->CategoryID) || $this->CategoryID == null) {			return null;        }				$query = 'SELECT ID, CategoryID, Name, MainImageExt FROM Articles WHERE IsDeleted=0 AND isActive = 1 AND CategoryID = '.$this->CategoryID.' AND ID <> '.$id.' ORDER BY RAND() LIMIT 0,3';		$similar = $this->db->query($query)->fetchAll();				return $similar;	}		public function getMostDiscussed($count = 9){		$discused = $this->db->query('SELECT ID, CategoryID, Name, ShortDescription, MainImageExt FROM Articles WHERE IsActive = 1 AND IsDeleted = 0 ORDER BY CountComments desc LIMIT 0, '.(int)$count)->fetchAll();		return $discused;	}	    public function getArticleDocuments($AArticleID) {        $query = "select Comment, FilePath, FileName from ArticleDocuments where ArticleID  = $AArticleID;";        return $this->db->query($query)->fetchAll();	}}